import cv2
import numpy as np
import os
import time
import logging
from ultralytics import YOLO

# Thiết lập logging
logger = logging.getLogger(__name__)

class ObjectDetector:
    def __init__(self):
        """Khởi tạo detector với mô hình YOLOv8"""
        # Đường dẫn đến model
        model_path = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))), 
                                 'model', 'best.pt')
        
        try:
            # Tải model
            logger.info(f"Loading YOLOv8 model from: {model_path}")
            self.model = YOLO(model_path)
            logger.info(f"Model loaded successfully: {model_path}")
        except Exception as e:
            logger.error(f"Error loading model: {str(e)}")
            self.model = None

    def process_frame(self, frame, source=None, is_streaming=True):
        """Xử lý một frame và trả về kết quả phát hiện"""
        if self.model is None:
            return frame  # Trả về frame gốc nếu model không tồn tại
        
        try:
            # Thực hiện phát hiện đối tượng với YOLOv8
            results = self.model(frame, verbose=False)
            
            # YOLOv8 trả về list of Results objects
            result = results[0]  # Lấy kết quả đầu tiên
            
            # Vẽ các bounding boxes lên frame
            if len(result.boxes) > 0:
                for box in result.boxes:
                    # Lấy tọa độ bounding box
                    x1, y1, x2, y2 = map(int, box.xyxy[0])
                    
                    # Lấy độ tin cậy
                    conf = float(box.conf[0])
                    
                    # Lấy class ID và tên
                    cls_id = int(box.cls[0])
                    cls_name = self.model.names[cls_id]
                    
                    # Màu dựa vào loại đối tượng
                    if 'animal' in cls_name.lower() or 'dog' in cls_name.lower() or 'cat' in cls_name.lower():
                        color = (0, 255, 0)  # Xanh lá cho động vật
                    else:
                        color = (0, 0, 255)  # Đỏ cho người hoặc đối tượng khác
                    
                    # Vẽ bounding box
                    cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
                    
                    # Thêm text
                    label = f"{cls_name}: {conf:.2f}"
                    cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
            
            return frame
            
        except Exception as e:
            logger.error(f"Error in process_frame: {str(e)}")
            return frame

    def process_video(self, input_path, output_path, progress_callback=None):
        """Xử lý video và trả về kết quả phát hiện"""
        if self.model is None:
            logger.error("No model loaded for video processing")
            return []
            
        try:
            cap = cv2.VideoCapture(input_path)
            if not cap.isOpened():
                logger.error(f"Error opening video file: {input_path}")
                return []
                
            # Lấy thông tin video
            width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
            height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
            fps = cap.get(cv2.CAP_PROP_FPS)
            total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
            
            # Kiểm tra và đặt FPS mặc định nếu giá trị không hợp lệ
            if fps <= 0 or np.isnan(fps):
                logger.warning("Invalid FPS value, setting to default 30")
                fps = 30.0
            
            # Sửa: Sử dụng codec XVID thay vì MP4V cho Windows
            if os.name == 'nt':  # Windows
                fourcc = cv2.VideoWriter_fourcc(*'XVID')
                output_temp = output_path.replace('.mp4', '.avi')
            else:  # Linux/Mac
                fourcc = cv2.VideoWriter_fourcc(*'mp4v')
                output_temp = output_path
                
            logger.info(f"Creating VideoWriter: {width}x{height}, {fps}fps, fourcc={fourcc}")
            out = cv2.VideoWriter(output_temp, fourcc, fps, (width, height))
            
            if not out.isOpened():
                logger.error(f"Failed to open output video file: {output_temp}")
                return []
                
            frame_count = 0
            all_detections = []
            
            # Xử lý từng frame
            while cap.isOpened():
                ret, frame = cap.read()
                if not ret:
                    break
                    
                # In frame count mỗi 100 frame
                if frame_count % 100 == 0:
                    logger.info(f"Processing frame {frame_count}/{total_frames}")
                    
                # Xử lý frame
                try:
                    processed_frame = self.process_frame(frame, is_streaming=False)
                    
                    # Lưu frame đã xử lý
                    out.write(processed_frame)
                    
                    # Lấy kết quả phát hiện cho frame hiện tại
                    results = self.model(frame, verbose=False)
                    result = results[0]  # Lấy kết quả đầu tiên
                    
                    # Thêm vào list tất cả phát hiện
                    if len(result.boxes) > 0:
                        for box in result.boxes:
                            # Lấy tọa độ bounding box
                            x1, y1, x2, y2 = map(float, box.xyxy[0])
                            
                            # Lấy độ tin cậy
                            conf = float(box.conf[0])
                            
                            # Lấy class ID và tên
                            cls_id = int(box.cls[0])
                            cls_name = self.model.names[cls_id]
                            
                            all_detections.append({
                                'frame': frame_count,
                                'class': cls_name,
                                'confidence': conf,
                                'box': [x1, y1, x2, y2]
                            })
                except Exception as e:
                    logger.error(f"Error processing frame {frame_count}: {str(e)}")
                
                # Cập nhật tiến trình
                frame_count += 1
                if progress_callback and total_frames > 0:
                    progress = int((frame_count / total_frames) * 100)
                    progress_callback(progress)
            
            # Giải phóng resources
            cap.release()
            out.release()
            
            # Nếu đang chạy trên Windows, chuyển đổi AVI sang MP4 bằng FFmpeg nếu có
            if os.name == 'nt' and output_temp != output_path:
                try:
                    import subprocess
                    logger.info(f"Converting AVI to MP4: {output_temp} -> {output_path}")
                    # Kiểm tra xem ffmpeg có sẵn không
                    ffmpeg_cmd = ['ffmpeg', '-i', output_temp, '-c:v', 'libx264', '-preset', 'fast', 
                                '-crf', '22', '-c:a', 'aac', output_path]
                    subprocess.run(ffmpeg_cmd, check=True)
                    
                    # Xóa file tạm sau khi chuyển đổi thành công
                    os.remove(output_temp)
                    logger.info("Conversion complete and temp file removed")
                except Exception as e:
                    logger.error(f"FFmpeg conversion failed: {str(e)}. Using AVI file instead.")
                    # Nếu chuyển đổi thất bại, sử dụng file AVI và đổi tên nó
                    os.rename(output_temp, output_path)
            
            logger.info(f"Video processing completed: {output_path} with {frame_count} frames")
            logger.info(f"Detections found: {len(all_detections)}")
            return all_detections
            
        except Exception as e:
            logger.error(f"Error processing video: {str(e)}", exc_info=True)
            return []